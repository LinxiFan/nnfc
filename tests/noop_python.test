#!/usr/bin/env python3

import torch
import torch.nn as nn
from torch.autograd import Variable

from nnfc.modules.noop import NoopEncoder
from nnfc.modules.noop import NoopDecoder

class MyNetwork(nn.Module):
    def __init__(self):
        super(MyNetwork, self).__init__()
        self.noop_encoder = NoopEncoder()
        self.noop_decoder = NoopDecoder()

    def forward(self, inp):
        encoded = self.noop_encoder(inp)
        decoded = self.noop_decoder(encoded)
        return decoded

model = MyNetwork()

x = torch.arange(0, 4000).view(10, 4, 10, 10).float()

print('cpu only test')
inp = Variable(x, requires_grad=True)
out = model(inp)
print('input on gpu?', inp.is_cuda)
print('output on gpu?', out.is_cuda)
print('noop success:', (inp == out).all() and inp.is_cuda == out.is_cuda)


out = Variable(torch.sum(out), requires_grad=True)
out.backward()

print()

if torch.cuda.is_available():
    print('gpu only test')
    inp = Variable(x).cuda()
    out = model(inp)
    print('input on gpu?', inp.is_cuda)
    print('output on gpu?', out.is_cuda)
    print('noop success:', (inp == out).all() and inp.is_cuda == out.is_cuda)
