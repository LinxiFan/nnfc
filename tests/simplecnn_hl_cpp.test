#!/usr/bin/env python3

import torch
import torch.nn.functional as F
from torch.autograd import Variable

import resnet_models

import h5py
import numpy as np
import os
import six
import subprocess as sub

TMPDIR = os.environ['NNFC_TEST_TMPDIR']

batch_size = 1
num_channels = 3
height = 32
width = 32
inputs = Variable(10*torch.randn(batch_size, num_channels, height, width))
print('inputs.shape', inputs.shape)

net = resnet_models.TinyNet()
model_params = net.state_dict()

for param_name in model_params.keys():
    shape = model_params[param_name].size()
    model_params[param_name] = torch.randn(shape)

net.eval()
    
hdf5_file = os.path.join(TMPDIR, 'simplecnn_hl.h5')

with h5py.File(hdf5_file, 'w') as f:
    for param_name in model_params.keys():
        f.create_dataset(param_name, data=model_params[param_name])
            
    f.create_dataset('hdf5_version', data=six.u(h5py.version.hdf5_version))

    outputs = net(inputs)
    print(outputs)
    f.create_dataset('input', data=inputs.data.numpy())
    f.create_dataset('output', data=outputs.data.numpy())
    
sub.check_call(['./simplecnn_hl.bin', hdf5_file])
