#!/usr/bin/env python3

import torch
import torch.nn as nn
from torch.autograd import Variable

from nnfc.modules.nnfc import CompressionLayer

class MyNetwork(nn.Module):
    def __init__(self):
        super(MyNetwork, self).__init__()
        self.nnfc_compression_layer = CompressionLayer(codec_name='noop')

    def forward(self, inp):
        inp = self.nnfc_compression_layer(inp)
        return inp

model = MyNetwork()
model.train()

inp = Variable(torch.randn(13, 7, 5, 11)  % 256)

print('cpu only test')
out = model(inp)
print('input on gpu?', inp.is_cuda)
print('output on gpu?', out.is_cuda)
print('nnfc success:', (inp == out).all() and inp.is_cuda == out.is_cuda)

print()

if torch.cuda.is_available():
    print('gpu only test')
    inp = inp.cuda()
    out = model(inp)
    print('input on gpu?', inp.is_cuda)
    print('output on gpu?', out.is_cuda)
    print('nnfc success:', (inp == out).all() and inp.is_cuda == out.is_cuda)
