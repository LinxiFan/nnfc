#!/usr/bin/env python3

import torch
import torch.nn as nn
from torch.autograd import Variable

from nnfc.modules.nnfc import CompressionLayer

class MyNetwork(nn.Module):
    def __init__(self):
        super(MyNetwork, self).__init__()
        self.nnfc_compression_layer = CompressionLayer(encoder_name='jpeg_encoder',
                                                       encoder_params_dict={'quantizer' : 98},
                                                       decoder_name='jpeg_decoder',
                                                       decoder_params_dict={})

    def forward(self, inp):
        inp = self.nnfc_compression_layer(inp)
        return inp

model = MyNetwork()
model.train()

inp = Variable(torch.randn(13, 7, 5, 11))
#inp = Variable(42 * torch.ones(3, 2, 1, 2))

print('cpu only test')
out = model(inp)
print('input on gpu?', inp.is_cuda)
print('output on gpu?', out.is_cuda)
cpu_success = bool((inp == out).all().item() and inp.is_cuda == out.is_cuda)
print('nnfc success:', cpu_success)

#print('input', inp)
#print('output', out)

print()

gpu_success = True
if torch.cuda.is_available():
    print('gpu only test')
    inp = inp.cuda()
    out = model(inp)
    print('input on gpu?', inp.is_cuda)
    print('output on gpu?', out.is_cuda)
    gpu_success = bool((inp == out).all().item() and inp.is_cuda == out.is_cuda)
    print('nnfc success:', gpu_success)

assert cpu_success and gpu_success, 'test failed'
print('test passed')
    
