#!/usr/bin/env python3
import numpy as np
from PIL import Image

import torch
import torch.nn as nn
from torch.autograd import Variable

from nnfc.modules.nnfc import CompressionLayer

class MyNetwork(nn.Module):
    def __init__(self):
        super(MyNetwork, self).__init__()
        self.nnfc_compression_layer = CompressionLayer(encoder_name='jpeg_encoder',
                                                       encoder_params_dict={'quantizer' : 99},
                                                       decoder_name='jpeg_decoder',
                                                       decoder_params_dict={})

    def forward(self, inp):
        inp = self.nnfc_compression_layer(inp)
        return inp

model = MyNetwork()
model.train()

x0, y0, sigma = 8, 8, 2
x, y = np.arange(32), np.arange(32)

gx = np.exp(-(x-x0)**2/(2*sigma**2))
gy = np.exp(-(y-y0)**2/(2*sigma**2))
g = np.outer(gx, gy)
g /= np.sum(g)
g = 500 * np.stack([g.copy() for _ in range(256)], axis=0)

#g = np.clip(0.5 * np.random.randn(256, 32, 32), 0, None)
g = np.expand_dims(g, axis=0)
print(g.shape)

inp = Variable(torch.from_numpy(g.astype(np.float32)))

print('cpu only test')
out = model(inp)
print('input on gpu?', inp.is_cuda)
print('output on gpu?', out.is_cuda)
cpu_success = bool(((inp - out) < 10**-4).all().item() and inp.is_cuda == out.is_cuda)
print('nnfc success:', cpu_success)

# o = out[0,0,:,:].numpy()
# m = np.max(o)
# o /= m
# o *= 255
# Image.fromarray(o.astype(np.uint8)).save('/home/jemmons/out.jpg')

# print(inp)
# print(out)
print(np.max(inp.numpy()))
print(np.max((inp - out).numpy()))

gpu_success = True
if torch.cuda.is_available():
    print('gpu only test')
    inp = inp.cuda()
    out = model(inp)
    print('input on gpu?', inp.is_cuda)
    print('output on gpu?', out.is_cuda)
    gpu_success = bool((inp == out).all().item() and inp.is_cuda == out.is_cuda)
    print('nnfc success:', gpu_success)

assert cpu_success and gpu_success, 'test failed'
print('test passed')
    
